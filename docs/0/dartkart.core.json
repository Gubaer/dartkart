{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"out/ReleaseIA32/dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"out/ReleaseIA32/dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"dartkart.core","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"isChrome0()","name":"isChrome","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","kind":"method","comment":"\ntrue, if we are currently running in chrome\n","line":"12"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"isFirefox0()","name":"isFirefox","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","kind":"method","comment":"\ntrue, if we are currently running in Mozilla Firefox\n","line":"6"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isChrome","name":"isChrome","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","kind":"property","comment":"\ntrue, if we are currently running in chrome\n","line":"12"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isFirefox","name":"isFirefox","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","kind":"property","comment":"\ntrue, if we are currently running in Mozilla Firefox\n","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"PropertyObservable","name":"PropertyObservable","children":[{"id":"notify4()","name":"notify","children":[{"id":"source","name":"source","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"property","name":"property","kind":"param"},{"id":"oldValue","name":"oldValue","kind":"param"},{"id":"newValue","name":"newValue","kind":"param"}],"kind":"method","line":"29"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"PropertyChangeEvent","refId":"dartkart.core/PropertyChangeEvent"}]},"id":"onPropertyChanged","name":"onPropertyChanged","kind":"property","line":"26"},{"isFinal":true,"ref":{"name":"StreamController","refId":"dart.async/StreamController"},"id":"_controller","name":"_controller","kind":"variable","isPrivate":true,"line":"24"}],"uri":"file:///home/karl/repositories/dartkart/lib/src/core/events.dart","kind":"class","line":"23"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"PropertyChangeEvent","name":"PropertyChangeEvent","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"18"},{"isFinal":true,"ref":{"name":"Object","refId":"dart.core/Object"},"id":"source","name":"source","kind":"variable","line":"9"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"variable","line":"11"},{"isFinal":true,"id":"oldValue","name":"oldValue","kind":"variable","line":"13"},{"isFinal":true,"id":"newValue","name":"newValue","kind":"variable","line":"15"},{"id":"PropertyChangeEvent4()","name":"PropertyChangeEvent","children":[{"initializedField":{"name":"source","refId":"dartkart.core/PropertyChangeEvent/source"},"ref":{"name":"Object","refId":"dart.core/Object"},"id":"source","name":"source","kind":"param"},{"initializedField":{"name":"name","refId":"dartkart.core/PropertyChangeEvent/name"},"ref":{"name":"String","refId":"dart.core/String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"name":"oldValue","refId":"dartkart.core/PropertyChangeEvent/oldValue"},"id":"oldValue","name":"oldValue","kind":"param"},{"initializedField":{"name":"newValue","refId":"dartkart.core/PropertyChangeEvent/newValue"},"id":"newValue","name":"newValue","kind":"param"}],"kind":"constructor","line":"16"}],"uri":"file:///home/karl/repositories/dartkart/lib/src/core/events.dart","kind":"class","comment":"\nAn event emitted by a [PropertyObservable] if the value of a property\nchanges.\n","line":"7"}],"uri":"file:///home/karl/repositories/dartkart/lib/src/core.dart","kind":"library","line":"1"}