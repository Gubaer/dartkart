{"dependencies":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"out/ReleaseIA32/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"\nThe library `dartkart.core` provides basic infrastructure classes.\n","uri":"file:///home/karl/repositories/dartkart/lib/src/core.dart","id":"dartkart.core","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\ntrue, if we are currently running in chrome\n","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","name":"isChrome","id":"isChrome0()","line":"12","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\ntrue, if we are currently running in Mozilla Firefox\n","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","name":"isFirefox","id":"isFirefox0()","line":"6","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\ntrue, if we are currently running in chrome\n","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","name":"isChrome","id":"isChrome","line":"12","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\ntrue, if we are currently running in Mozilla Firefox\n","uri":"file:///home/karl/repositories/dartkart/lib/src/core/browser.dart","name":"isFirefox","id":"isFirefox","line":"6","kind":"property"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA mixin class which provides the basic infrastructure for notifying\nclients about property changes.\n\n## Example\n    class Layer extends Object with PropertyObservable {\n       String _name;\n       set name(String value) {\n          var oldValue = _name;\n          _name = value;\n          // notify observers about property changes\n          notify(this, \"name\", oldValue, value);\n       }\n    }\n","uri":"file:///home/karl/repositories/dartkart/lib/src/core/events.dart","name":"PropertyObservable","id":"PropertyObservable","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nNotifies observers about an update of the property with\nname [property] in this object. [oldValue] was replaced\nby [newValue].\n\nObservers are only notified, provided [newValue] is different\nfrom [oldValue] and if there is at least one listener.\n\n","name":"notify","id":"notify3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"property","id":"property","kind":"param"},{"name":"oldValue","id":"oldValue","kind":"param"},{"name":"newValue","id":"newValue","kind":"param"}],"line":"80","kind":"method"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dartkart.core/PropertyChangeEvent","name":"PropertyChangeEvent"}],"name":"Stream"},"comment":"\nthe stream of property change events\n\n## Example\n\n     // an observable with a mixed in PropertyObservable\n     var observable = ...;\n     // listen for property change events for the property\n     // 'my_property'\n     observable.onPropertyChanged\n       .where((evt) => evt.name == \"my_property\")\n       .listen((evt) => print(\"new value: ${evt.newValue}\"));\n","name":"onPropertyChanged","id":"onPropertyChanged","line":"56","kind":"property"},{"ref":{"refId":"dart.async/StreamController","arguments":[{"refId":"dartkart.core/PropertyChangeEvent","name":"PropertyChangeEvent"}],"name":"StreamController"},"isFinal":true,"name":"_controller","isPrivate":true,"id":"_controller","line":"39","kind":"variable"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dartkart.core/PropertyChangeEvent","name":"PropertyChangeEvent"}],"name":"Stream"},"name":"_stream","isPrivate":true,"id":"_stream","line":"41","kind":"variable"}],"line":"38","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn event emitted by a [PropertyObservable] if the value of a property\nchanges.\n","uri":"file:///home/karl/repositories/dartkart/lib/src/core/events.dart","name":"PropertyChangeEvent","id":"PropertyChangeEvent","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"18","kind":"method"},{"ref":{"refId":"dart.core/Object","name":"Object"},"isFinal":true,"comment":"the source object where the property was changed","name":"source","id":"source","line":"9","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"the property name","name":"name","id":"name","line":"11","kind":"variable"},{"isFinal":true,"comment":"the old value","name":"oldValue","id":"oldValue","line":"13","kind":"variable"},{"isFinal":true,"comment":" the new value","name":"newValue","id":"newValue","line":"15","kind":"variable"},{"name":"PropertyChangeEvent","id":"PropertyChangeEvent4()","children":[{"initializedField":{"refId":"dartkart.core/PropertyChangeEvent/source","name":"source"},"ref":{"refId":"dart.core/Object","name":"Object"},"name":"source","id":"source","kind":"param"},{"initializedField":{"refId":"dartkart.core/PropertyChangeEvent/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"dartkart.core/PropertyChangeEvent/oldValue","name":"oldValue"},"name":"oldValue","id":"oldValue","kind":"param"},{"initializedField":{"refId":"dartkart.core/PropertyChangeEvent/newValue","name":"newValue"},"name":"newValue","id":"newValue","kind":"param"}],"line":"16","kind":"constructor"}],"line":"7","kind":"class"}],"line":"4","kind":"library"}