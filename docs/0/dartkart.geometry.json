{"dependencies":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"out/ReleaseIA32/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nInterface used by types that have an intrinsic ordering.\n","uri":"out/ReleaseIA32/dart-sdk/lib/core/comparable.dart","name":"Comparable","id":"Comparable","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dart.core/Comparable/T","name":"T"},"name":"other","id":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","name":"compare","id":"compare2()","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"name":"b","id":"b","kind":"param"}],"line":"43","kind":"method"},{"name":"T","id":"T","kind":"typeparam"}],"line":"26","kind":"class"}],"line":"5","kind":"library"}],"comment":"\nThe library `dartkart.geometry` provides classes for basic geometric\nconcepts like a 2-dimensional point, a dimension, or a boundary\nbox.\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geometry.dart","id":"dartkart.geometry","children":[{"name":"_require","isPrivate":true,"id":"_require2()","children":[{"name":"cond","id":"cond","kind":"param"},{"isOptional":true,"defaultValue":"\"\"","name":"msg","id":"msg","kind":"param"}],"line":"18","kind":"method"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe dimension of a rectangular area given by a width and a height.\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geometry/dimension.dart","name":"Dimension","id":"Dimension","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"23","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"25","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Dimension","name":"Dimension"},"isOperator":true,"name":"*","id":"*1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"factor","id":"factor","kind":"param"}],"line":"27","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Dimension","name":"Dimension"},"isOperator":true,"name":"/","id":"#slash1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"divisor","id":"divisor","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Dimension","name":"Dimension"},"name":"toInt","id":"toInt0()","line":"32","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"24","kind":"property"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"comment":"the width","name":"width","id":"width","line":"8","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"comment":"the height","name":"height","id":"height","line":"10","kind":"variable"},{"comment":"\nCreates a dimension object with [width] and [height].\n\nThrows [ArgumentError] if either [width] or [height] is\nnegative.\n","name":"Dimension","id":"Dimension2()","children":[{"initializedField":{"refId":"dartkart.geometry/Dimension/width","name":"width"},"ref":{"refId":"dart.core/num","name":"num"},"name":"width","id":"width","kind":"param"},{"initializedField":{"refId":"dartkart.geometry/Dimension/height","name":"height"},"ref":{"refId":"dart.core/num","name":"num"},"name":"height","id":"height","kind":"param"}],"line":"18","kind":"constructor"}],"kind":"class"},{"interfaces":[{"refId":"dart.core/Comparable","arguments":[{"refId":"dartkart.geometry/Point2D","name":"Point2D"}],"name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA point in 2D cartesian space.\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geometry/point2d.dart","name":"Point2D","id":"Point2D","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"name":"compareTo","id":"compareTo1()","children":[{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"other","id":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"54","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"isOperator":true,"comment":"\nCreates a new point by adding [other] to this point.\n\n### Possible values for [other]\n* [Point2D]  - vector addition \n* [Dimension] - adds `x` and `width`, and `y` and `height`\n","name":"+","id":"+1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"isOperator":true,"name":"unary-","id":"unary-0()","line":"69","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"isOperator":true,"comment":"\nCreates a new point by subtracting [other] from this point.\n\n### Possible values for [other]\n* [Point2D]  - vector subtraction \n* [Dimension] - subtracts `width` from `x`, and `height` from `y`\n","name":"-","id":"-1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"78","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"isOperator":true,"name":"*","id":"*1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"factor","id":"factor","kind":"param"}],"line":"83","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"isOperator":true,"name":"/","id":"#slash1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"divisor","id":"divisor","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"returns a new point whose coordinates are converted to [int]","name":"toInt","id":"toInt0()","line":"89","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"returns a new point with the minimal coordinates of this and [other]","name":"min","id":"min1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"92","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"returns a new point with the maximal coordinates of this and [other]","name":"max","id":"max1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"95","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"returns a new point translate by [dx] in x direction and [dy] in\ny direction","name":"translate","id":"translate2()","children":[{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0","name":"dx","id":"dx","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0","name":"dy","id":"dy","kind":"param"}],"line":"99","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"returns a new point scaled by [sx] in x direction and by [sy]\nin y direction","name":"scale","id":"scale2()","children":[{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"1","name":"sx","id":"sx","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"1","name":"sy","id":"sy","kind":"param"}],"line":"103","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"returns a new point for which the sign of the y-coordinates is inverted","name":"flipY","id":"flipY0()","line":"106","kind":"method"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"\nreturns a new point whose coordinates are truncated to\n[afterDecimalPoint] digits after the decimal point.\n","name":"truncate","id":"truncate1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0","name":"afterDecimalPoint","id":"afterDecimalPoint","kind":"param"}],"line":"112","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"119","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"86","kind":"property"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"comment":"the x-coordinate","name":"x","id":"x","line":"8","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"isFinal":true,"comment":"the y-coordinate","name":"y","id":"y","line":"11","kind":"variable"},{"comment":"\nCreates a point for the [x] and [y] coordinate.\n","name":"Point2D","id":"Point2D2()","children":[{"initializedField":{"refId":"dartkart.geometry/Point2D/x","name":"x"},"ref":{"refId":"dart.core/num","name":"num"},"name":"x","id":"x","kind":"param"},{"initializedField":{"refId":"dartkart.geometry/Point2D/y","name":"y"},"ref":{"refId":"dart.core/num","name":"num"},"name":"y","id":"y","kind":"param"}],"line":"16","kind":"constructor"},{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"\nCreates a point from another object [other].\n\n## Possible values for [other]\n\n* another [Point2D], in which case [other] is cloned\n* a [List] with exactly two [num] values.\n\n## Examples\n\n    var p1 = new Point2D.from([0,1]);\n    var p2 = new Point2D.from(p1);\n","name":"Point2D.from","id":"Point2D.from1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"31","kind":"constructor"},{"comment":"\nCreates a new point at position (0,0)\n","name":"Point2D.origin","id":"Point2D.origin0()","line":"46","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBounds represents a rectangular area on the screen in pixel coordinates\nor a rectangular area in a rendered coordinate system.\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geometry/bounds.dart","name":"Bounds","id":"Bounds","children":[{"returnType":{"refId":"dartkart.geometry/Bounds","name":"Bounds"},"comment":"\nReplies an extended version of this bounds which\nincludes [other].\n","name":"extendTo","id":"extendTo1()","children":[{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"other","id":"other","kind":"param"}],"line":"56","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nChecks whether this bounds contains [other].\n\n[other] is either another [Bounds] or a [Point2D].\n\n","name":"contains","id":"contains1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"69","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"returns true, if [other] intersects with this bounds","name":"intersects","id":"intersects1()","children":[{"ref":{"refId":"dartkart.geometry/Bounds","name":"Bounds"},"name":"other","id":"other","kind":"param"}],"line":"81","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"90","kind":"method"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"the lower left point","name":"min","id":"min","line":"27","kind":"property"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"the upper right bounds","name":"max","id":"max","line":"30","kind":"property"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"the lower left point, see also [min]","name":"lowerLeft","id":"lowerLeft","line":"33","kind":"property"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"the upper left corner point","name":"upperLeft","id":"upperLeft","line":"35","kind":"property"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"the upper right corner point","name":"upperRight","id":"upperRight","line":"37","kind":"property"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"the lower right corner point","name":"lowerRight","id":"lowerRight","line":"39","kind":"property"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"the center point of this bounds object","name":"center","id":"center","line":"59","kind":"property"},{"ref":{"refId":"dartkart.geometry/Dimension","name":"Dimension"},"name":"size","id":"size","line":"61","kind":"property"},{"ref":{"refId":"dart.core/num","name":"num"},"comment":"the width of the bounds","name":"width","id":"width","line":"86","kind":"property"},{"ref":{"refId":"dart.core/num","name":"num"},"comment":"the height of the bounds","name":"height","id":"height","line":"88","kind":"property"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"_min","isPrivate":true,"id":"_min","line":"8","kind":"variable"},{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"_max","isPrivate":true,"id":"_max","line":"9","kind":"variable"},{"comment":"\nCreates a new bounds given two corner Point2Ds.\n\n[min] is the lower left, [max] the upper right Point2D. Both are either\n[Point2D]s or any other object accepted by [Point2D.from].\n\nExamples:\n    var b1 = new Bounds(new Point2D(0,0), new Point2D(2,2));\n    var b2 = new Bounds([0,0], [2,2]);\n","name":"Bounds","id":"Bounds2()","children":[{"name":"min","id":"min","kind":"param"},{"name":"max","id":"max","kind":"param"}],"line":"21","kind":"constructor"},{"returnType":{"refId":"dartkart.geometry/Bounds","name":"Bounds"},"comment":"\nCreates a bounds from another value [other].\n\n[other] can be one of the following values:\n\n* a [Bounds]  -> replies a copy of [other]\n","name":"Bounds.from","id":"Bounds.from1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"48","kind":"constructor"}],"line":"7","kind":"class"}],"line":"6","kind":"library"}