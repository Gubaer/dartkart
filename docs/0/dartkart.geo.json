{"dependencies":[{"uri":"out/ReleaseIA32/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"out/ReleaseIA32/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"\nThe library `dartkart.geo` provides classes for geodetic coordinates, for\ncoordinate systems and for the transformation between coordinate\nsystems (projections).\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo.dart","id":"dartkart.geo","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"true if [lon] is a valid longitude in the range -180..180","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/latlon.dart","name":"isValidLon","id":"isValidLon1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"lon","id":"lon","kind":"param"}],"line":"7","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"true if [lat] is a valid latitude in the range -90..90","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/latlon.dart","name":"isValidLat","id":"isValidLat1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"lat","id":"lat","kind":"param"}],"line":"4","kind":"method"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn instance of this class represents a rectangular are in geograpic\ncoordinates (lat/lon).\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/latlonbounds.dart","name":"LatLonBounds","id":"LatLonBounds","children":[{"name":"_containsPoint","isPrivate":true,"id":"_containsPoint1()","children":[{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"p","id":"p","kind":"param"}],"line":"66","kind":"method"},{"name":"_containsBounds","isPrivate":true,"id":"_containsBounds1()","children":[{"ref":{"refId":"dartkart.geo/LatLonBounds","name":"LatLonBounds"},"name":"b","id":"b","kind":"param"}],"line":"70","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nChecks wheter [obj] is within this bounds.\n\n## Possible values for [obj]\n* a [LatLon] -> checks whether the point is this bounds\n* a [LatLonBounds] -> checks whether the bounds are completely in this\n  bounds\n\nThrows [ArgumentError] if [obj] is either null or of an\nunexpected type.\n","name":"contains","id":"contains1()","children":[{"name":"obj","id":"obj","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nChecks whether [b] interesects with this bounds.\n\nReplies true, if [b] interesects, false otherwise.\nThrows [ArgumentError] if [b] is null or of an unexpected type\n","name":"intersects","id":"intersects1()","children":[{"ref":{"refId":"dartkart.geo/LatLonBounds","name":"LatLonBounds"},"name":"b","id":"b","kind":"param"}],"line":"96","kind":"method"},{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"the south-west corner","name":"southWest","id":"southWest","line":"53","kind":"property"},{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"the south-east corner","name":"southEast","id":"southEast","line":"55","kind":"property"},{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"the north-east corner","name":"northEast","id":"northEast","line":"57","kind":"property"},{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"the north-west corner","name":"northWest","id":"northWest","line":"60","kind":"property"},{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"the center point","name":"center","id":"center","line":"63","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_minLat","isPrivate":true,"id":"_minLat","line":"8","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_minLon","isPrivate":true,"id":"_minLon","line":"9","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_maxLat","isPrivate":true,"id":"_maxLat","line":"10","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_maxLon","isPrivate":true,"id":"_maxLon","line":"11","kind":"variable"},{"comment":"\nCreates the bounds given the southwest corner [min]\nand the northeast corner [max].\n\nBoth [min] are [max] must be objects accepted by\n[LatLon.from].\n\n## Examples\n    var b1 = new LatLonBounds(new LonLat(0,0), new LonLat(1,1));\n    var b1 = new LatLonBounds([0,0], [1,1]);\n    var b1 = new LatLonBounds({\"lon\": 0, \"lat\": 0}, {\"lon\": 1, \"lat\": 1});\n","name":"LatLonBounds","id":"LatLonBounds2()","children":[{"name":"min","id":"min","kind":"param"},{"name":"max","id":"max","kind":"param"}],"line":"25","kind":"constructor"},{"returnType":{"refId":"dartkart.geo/LatLonBounds","name":"LatLonBounds"},"comment":"\nCreate a bounds objects from another value [other].\n\n## Possible values for [other]\n\n* a [LatLonBounds] -> creates a copy of [other]\n","name":"LatLonBounds.from","id":"LatLonBounds.from1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"42","kind":"constructor"}],"line":"7","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn instance of this class represents a pair of geodetic\ncoordinates (lat/lon).\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/latlon.dart","name":"LatLon","id":"LatLon","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"92","kind":"method"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"the latitue","name":"lat","id":"lat","line":"82","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"the longitude","name":"lon","id":"lon","line":"85","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_lat","isPrivate":true,"id":"_lat","line":"15","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_lon","isPrivate":true,"id":"_lon","line":"16","kind":"variable"},{"comment":"\nCreates a point with coordinates [lat] and [lon].\n\nThrows [ArgumentError] if either [lat] or [lon] isn't in the expected\nrange.\n","name":"LatLon","id":"LatLon2()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"lat","id":"lat","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"lon","id":"lon","kind":"param"}],"line":"24","kind":"constructor"},{"comment":"\nA (lon/lat) point at position (0,0).\n","name":"LatLon.origin","id":"LatLon.origin0()","line":"34","kind":"constructor"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"\nCreates a lat/lon point from another value [other].\n[other] must not be null.\n\n## [other] - possible values\n\n* another [LatLon]\n* a [List] with two numbers lat, lon\n* a [Map] with two properties `lat` and `lon` of type [num].\n\n## Examples\n\n    var ll1 = new LatLon.from([0, 12.32]);\n    var ll2 = new LatLon.from({\"lat\": 0, \"lon\": 12.32});\n    var ll3 = new LatLon.from(ll1);\n","name":"LatLon.from","id":"LatLon.from1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"53","kind":"constructor"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"LatLon._fromList","isPrivate":true,"id":"LatLon._fromList1()","children":[{"name":"l","id":"l","kind":"param"}],"line":"66","kind":"constructor"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"LatLon._fromMap","isPrivate":true,"id":"LatLon._fromMap1()","children":[{"name":"map","id":"map","kind":"param"}],"line":"76","kind":"constructor"}],"line":"13","kind":"class"},{"interfaces":[{"refId":"dartkart.geo/Projection","name":"Projection"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nTrivial equirectangular (Plate Carree) projection.\n\nThe units of the projected x/y-coordinates is *degrees*,\nwhere\n* -180 <= x <= 180\n*  -90 <= y <= -90\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/projection.dart","name":"PlateCarree","id":"PlateCarree","children":[{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"project","id":"project1()","children":[{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"ll","id":"ll","kind":"param"}],"line":"83","kind":"method"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"unproject","id":"unproject1()","children":[{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"p","id":"p","kind":"param"}],"line":"84","kind":"method"}],"line":"82","kind":"class"},{"interfaces":[{"refId":"dartkart.geo/Projection","name":"Projection"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nSpherical Mercator is a popular map projection.\n\nIt projects (lat, lon)-coordinates to a square whose sides\neach measure ~40'000km (the earths circumference). The units of the\nreturned x/y-coordinates is *meters*.\n\n\n              (20'000km, 20'000km\n      +-------o\n      |       |\n      |       |\n      o-------+\n (-20'000km, -20'000km\n\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/projection.dart","name":"SphericalMercator","id":"SphericalMercator","children":[{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"\nTransforms geographic coordinates [ll] into projected coordinates.\n\nThe projected coordinates are in degrees with the following ranges:\n\n* minx=-20037508.34, maxx = 20037508.34\n* miny=-20037508.34, maxy = 20037508.34\n","name":"project","id":"project1()","children":[{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"ll","id":"ll","kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"\nTransforms projected coordinates into geographic coordinates.\n\nBoth coordinates [p].x and [p].y should be in the\nrange (-20037508.34,+20037508.34).\n","name":"unproject","id":"unproject1()","children":[{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"p","id":"p","kind":"param"}],"line":"67","kind":"method"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"_MAX_LATITUDE","isPrivate":true,"id":"_MAX_LATITUDE","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"_DEG_TO_RAD","isPrivate":true,"id":"_DEG_TO_RAD","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"name":"_RAD_TO_DEG","isPrivate":true,"id":"_RAD_TO_DEG","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"isStatic":true,"comment":"half earth circumference in meters","name":"_HEC","isPrivate":true,"id":"_HEC","line":"41","kind":"variable"}],"line":"36","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn abstract projection\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/projection.dart","name":"Projection","id":"Projection","children":[{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"\nProject a point (lat/lon) from a geodetic coordinates into a\nPoint2D (x,y) in a projected coordinate system\n","name":"project","id":"project1()","children":[{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"ll","id":"ll","kind":"param"}],"line":"11","kind":"method"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"\nReverse project a Point2D (x,y) from a projected coordinate system into\na Point2D (lat/lon) in the geodetic coordinate system.\n","name":"unproject","id":"unproject1()","children":[{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"p","id":"p","kind":"param"}],"line":"17","kind":"method"}],"kind":"class"},{"superclass":{"refId":"dartkart.geo/ProjectedCRS","name":"ProjectedCRS"},"comment":"\nsee [EPSG:3857](http://spatialreference.org/ref/sr-org/6864/)\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/crs.dart","name":"EPSG3857","id":"EPSG3857","children":[{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"project","id":"project1()","children":[{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"ll","id":"ll","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"unproject","id":"unproject1()","children":[{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"p","id":"p","kind":"param"}],"line":"69","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"code","id":"code","line":"59","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"aliases","id":"aliases","line":"61","kind":"property"},{"ref":{"refId":"dartkart.geometry/Bounds","name":"Bounds"},"name":"projectedBounds","id":"projectedBounds","line":"63","kind":"property"},{"ref":{"refId":"dartkart.geo/LatLonBounds","name":"LatLonBounds"},"name":"geographicBounds","id":"geographicBounds","line":"65","kind":"property"},{"isFinal":true,"isStatic":true,"name":"_projection","isPrivate":true,"id":"_projection","line":"49","kind":"variable"},{"isFinal":true,"isStatic":true,"name":"_projectedBounds","isPrivate":true,"id":"_projectedBounds","line":"50","kind":"variable"},{"isFinal":true,"isStatic":true,"name":"_geographicBounds","isPrivate":true,"id":"_geographicBounds","line":"54","kind":"variable"}],"line":"48","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dartkart.geo/CoordinateReferenceSystem","name":"CoordinateReferenceSystem"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe abstract base class for a projected coordinate reference systems.\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/crs.dart","name":"ProjectedCRS","id":"ProjectedCRS","children":[{"returnType":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"comment":"\nProjects a point [ll] in geodetic coordinates\ninto a projected coordinate reference system.\n","name":"project","id":"project1()","children":[{"ref":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"name":"ll","id":"ll","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dartkart.geo/LatLon","name":"LatLon"},"comment":"\nMaps a point [p] in the projected coordinate reference system to\na point in the geodetic coordinate system.\n","name":"unproject","id":"unproject1()","children":[{"ref":{"refId":"dartkart.geometry/Point2D","name":"Point2D"},"name":"p","id":"p","kind":"param"}],"line":"42","kind":"method"},{"ref":{"refId":"dartkart.geo/LatLonBounds","name":"LatLonBounds"},"name":"geographicBounds","id":"geographicBounds","line":"29","kind":"property"},{"ref":{"refId":"dartkart.geometry/Bounds","name":"Bounds"},"name":"projectedBounds","id":"projectedBounds","line":"30","kind":"property"}],"line":"27","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAbstract base class for a coordinate reference system\n","uri":"file:///home/karl/repositories/dartkart/lib/src/geo/crs.dart","name":"CoordinateReferenceSystem","id":"CoordinateReferenceSystem","children":[{"ref":{"refId":"dart.core/String","name":"String"},"comment":"\nThe standardized identifier for this reference system.\n\nA coordinate references system can be assigned more than\none idetifier, see also [aliases]\n","name":"code","id":"code","line":"13","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"\nA list of code aliases for this reference system.\n\nThe empty list, if no alternative codes are known for this\ncoordinate reference system.\n","name":"aliases","id":"aliases","line":"21","kind":"property"}],"kind":"class"}],"line":"6","kind":"library"}